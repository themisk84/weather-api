{"{\"assumptions\":{},\"sourceRoot\":\"/Users/efthymioskarakasis/Desktop/Projects/weather-api/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/efthymioskarakasis/Desktop/Projects/weather-api\",\"filename\":\"/Users/efthymioskarakasis/Desktop/Projects/weather-api/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/efthymioskarakasis/Desktop/Projects/weather-api\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.17.9:development":{"value":{"code":"import express from \"express\";\nimport cors from \"cors\"; // Defines the port the app will run on. Defaults to 8080, but can be overridden\n// when starting the server. Example command to overwrite PORT env variable value:\n// PORT=9000 npm start\n\nconst port = process.env.PORT || 8080;\nconst app = express(); // Add middlewares to enable cors and json body parsing\n\napp.use(cors());\napp.use(express.json());\n\nconst getdata = () => {\n  let var1 = 0;\n\n  let request = require(\"request\");\n\n  return new Promise(function (resolve, reject) {\n    request(\"https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/18.0717/lat/59.3269/data.json\", function (error, response, body) {\n      if (err) return reject(err);\n\n      if (!error && response.statusCode == 200) {\n        const importedJSON = JSON.parse(body);\n        var1 = importedJSON.result.data;\n        console.log(var1);\n      }\n    });\n  });\n};\n\ngetdata(); // Start defining your routes here\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello Technigo!\");\n}); // Start the server\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwiY29ycyIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsImFwcCIsInVzZSIsImpzb24iLCJnZXRkYXRhIiwidmFyMSIsInJlcXVlc3QiLCJyZXF1aXJlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvciIsInJlc3BvbnNlIiwiYm9keSIsImVyciIsInN0YXR1c0NvZGUiLCJpbXBvcnRlZEpTT04iLCJKU09OIiwicGFyc2UiLCJyZXN1bHQiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsImdldCIsInJlcSIsInJlcyIsInNlbmQiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLE1BQWpCLEMsQ0FFQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBWixJQUFvQixJQUFqQztBQUNBLE1BQU1DLEdBQUcsR0FBR04sT0FBTyxFQUFuQixDLENBRUE7O0FBQ0FNLEdBQUcsQ0FBQ0MsR0FBSixDQUFRTixJQUFJLEVBQVo7QUFDQUssR0FBRyxDQUFDQyxHQUFKLENBQVFQLE9BQU8sQ0FBQ1EsSUFBUixFQUFSOztBQUVBLE1BQU1DLE9BQU8sR0FBRyxNQUFNO0FBQ3BCLE1BQUlDLElBQUksR0FBRyxDQUFYOztBQUNBLE1BQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0EsU0FBTyxJQUFJQyxPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDNUNKLElBQUFBLE9BQU8sQ0FDTCx3SEFESyxFQUVMLFVBQVVLLEtBQVYsRUFBaUJDLFFBQWpCLEVBQTJCQyxJQUEzQixFQUFpQztBQUMvQixVQUFJQyxHQUFKLEVBQVMsT0FBT0osTUFBTSxDQUFDSSxHQUFELENBQWI7O0FBQ1QsVUFBSSxDQUFDSCxLQUFELElBQVVDLFFBQVEsQ0FBQ0csVUFBVCxJQUF1QixHQUFyQyxFQUEwQztBQUN4QyxjQUFNQyxZQUFZLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXTCxJQUFYLENBQXJCO0FBQ0FSLFFBQUFBLElBQUksR0FBR1csWUFBWSxDQUFDRyxNQUFiLENBQW9CQyxJQUEzQjtBQUNBQyxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWWpCLElBQVo7QUFDRDtBQUNGLEtBVEksQ0FBUDtBQVdELEdBWk0sQ0FBUDtBQWFELENBaEJEOztBQWtCQUQsT0FBTyxHLENBRVA7O0FBQ0FILEdBQUcsQ0FBQ3NCLEdBQUosQ0FBUSxHQUFSLEVBQWEsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDekJBLEVBQUFBLEdBQUcsQ0FBQ0MsSUFBSixDQUFTLGlCQUFUO0FBQ0QsQ0FGRCxFLENBSUE7O0FBQ0F6QixHQUFHLENBQUMwQixNQUFKLENBQVc5QixJQUFYLEVBQWlCLE1BQU07QUFDckJ3QixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxzQ0FBcUN6QixJQUFLLEVBQXZEO0FBQ0QsQ0FGRCIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZWZ0aHltaW9za2FyYWthc2lzL0Rlc2t0b3AvUHJvamVjdHMvd2VhdGhlci1hcGkvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5cbi8vIERlZmluZXMgdGhlIHBvcnQgdGhlIGFwcCB3aWxsIHJ1biBvbi4gRGVmYXVsdHMgdG8gODA4MCwgYnV0IGNhbiBiZSBvdmVycmlkZGVuXG4vLyB3aGVuIHN0YXJ0aW5nIHRoZSBzZXJ2ZXIuIEV4YW1wbGUgY29tbWFuZCB0byBvdmVyd3JpdGUgUE9SVCBlbnYgdmFyaWFibGUgdmFsdWU6XG4vLyBQT1JUPTkwMDAgbnBtIHN0YXJ0XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG4vLyBBZGQgbWlkZGxld2FyZXMgdG8gZW5hYmxlIGNvcnMgYW5kIGpzb24gYm9keSBwYXJzaW5nXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcblxuY29uc3QgZ2V0ZGF0YSA9ICgpID0+IHtcbiAgbGV0IHZhcjEgPSAwO1xuICBsZXQgcmVxdWVzdCA9IHJlcXVpcmUoXCJyZXF1ZXN0XCIpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlcXVlc3QoXG4gICAgICBcImh0dHBzOi8vb3BlbmRhdGEtZG93bmxvYWQtbWV0ZmNzdC5zbWhpLnNlL2FwaS9jYXRlZ29yeS9wbXAzZy92ZXJzaW9uLzIvZ2VvdHlwZS9wb2ludC9sb24vMTguMDcxNy9sYXQvNTkuMzI2OS9kYXRhLmpzb25cIixcbiAgICAgIGZ1bmN0aW9uIChlcnJvciwgcmVzcG9uc2UsIGJvZHkpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICBpZiAoIWVycm9yICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT0gMjAwKSB7XG4gICAgICAgICAgY29uc3QgaW1wb3J0ZWRKU09OID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICAgICAgICB2YXIxID0gaW1wb3J0ZWRKU09OLnJlc3VsdC5kYXRhO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHZhcjEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG59O1xuXG5nZXRkYXRhKCk7XG5cbi8vIFN0YXJ0IGRlZmluaW5nIHlvdXIgcm91dGVzIGhlcmVcbmFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcykgPT4ge1xuICByZXMuc2VuZChcIkhlbGxvIFRlY2huaWdvIVwiKTtcbn0pO1xuXG4vLyBTdGFydCB0aGUgc2VydmVyXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWApO1xufSk7XG4iXX0=","map":{"version":3,"sources":["server.js"],"names":["express","cors","port","process","env","PORT","app","use","json","getdata","var1","request","require","Promise","resolve","reject","error","response","body","err","statusCode","importedJSON","JSON","parse","result","data","console","log","get","req","res","send","listen"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;AACA;AACA;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,MAAMC,GAAG,GAAGN,OAAO,EAAnB,C,CAEA;;AACAM,GAAG,CAACC,GAAJ,CAAQN,IAAI,EAAZ;AACAK,GAAG,CAACC,GAAJ,CAAQP,OAAO,CAACQ,IAAR,EAAR;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,MAAIC,IAAI,GAAG,CAAX;;AACA,MAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CJ,IAAAA,OAAO,CACL,wHADK,EAEL,UAAUK,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC/B,UAAIC,GAAJ,EAAS,OAAOJ,MAAM,CAACI,GAAD,CAAb;;AACT,UAAI,CAACH,KAAD,IAAUC,QAAQ,CAACG,UAAT,IAAuB,GAArC,EAA0C;AACxC,cAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAX,CAArB;AACAR,QAAAA,IAAI,GAAGW,YAAY,CAACG,MAAb,CAAoBC,IAA3B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACD;AACF,KATI,CAAP;AAWD,GAZM,CAAP;AAaD,CAhBD;;AAkBAD,OAAO,G,CAEP;;AACAH,GAAG,CAACsB,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,iBAAT;AACD,CAFD,E,CAIA;;AACAzB,GAAG,CAAC0B,MAAJ,CAAW9B,IAAX,EAAiB,MAAM;AACrBwB,EAAAA,OAAO,CAACC,GAAR,CAAa,sCAAqCzB,IAAK,EAAvD;AACD,CAFD","sourceRoot":"/Users/efthymioskarakasis/Desktop/Projects/weather-api/","sourcesContent":["import express from \"express\";\nimport cors from \"cors\";\n\n// Defines the port the app will run on. Defaults to 8080, but can be overridden\n// when starting the server. Example command to overwrite PORT env variable value:\n// PORT=9000 npm start\nconst port = process.env.PORT || 8080;\nconst app = express();\n\n// Add middlewares to enable cors and json body parsing\napp.use(cors());\napp.use(express.json());\n\nconst getdata = () => {\n  let var1 = 0;\n  let request = require(\"request\");\n  return new Promise(function (resolve, reject) {\n    request(\n      \"https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/18.0717/lat/59.3269/data.json\",\n      function (error, response, body) {\n        if (err) return reject(err);\n        if (!error && response.statusCode == 200) {\n          const importedJSON = JSON.parse(body);\n          var1 = importedJSON.result.data;\n          console.log(var1);\n        }\n      }\n    );\n  });\n};\n\ngetdata();\n\n// Start defining your routes here\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello Technigo!\");\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"]}},"mtime":1655996035938}}